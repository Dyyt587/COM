<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32H7B0\STM32H7B0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32H7B0\STM32H7B0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Nov 29 21:13:41 2023
<BR><P>
<H3>Maximum Stack Usage =        568 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MX_LTDC_Init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[165]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[91]">BDMA1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[91]">BDMA1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[1bb]">elog_output</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">elog_output</a><BR>
 <LI><a href="#[25c]">elog_strcpy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">elog_output</a><BR>
 <LI><a href="#[254]">elog_get_filter_tag_lvl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">elog_output</a><BR>
 <LI><a href="#[260]">get_fmt_enabled</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">elog_output</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from stm32h7xx_it.o(.text.ADC_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[91]">BDMA1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7b]">BDMA2_Channel0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7c]">BDMA2_Channel1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7d]">BDMA2_Channel2_IRQHandler</a> from stm32h7xx_it.o(.text.BDMA2_Channel2_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7e]">BDMA2_Channel3_IRQHandler</a> from stm32h7xx_it.o(.text.BDMA2_Channel3_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7f]">BDMA2_Channel4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[80]">BDMA2_Channel5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[81]">BDMA2_Channel6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[82]">BDMA2_Channel7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[66]">CEC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[83]">COMP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[89]">CRS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[57]">CRYP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[79]">DAC2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[56]">DCMI_PSSI_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6b]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6c]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6d]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6e]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[48]">DFSDM1_FLT4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[49]">DFSDM1_FLT5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4a]">DFSDM1_FLT6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4b]">DFSDM1_FLT7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[34]">DFSDM2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream0_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream2_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream3_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream4_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream5_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream6_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[62]">DMA2D_IRQHandler</a> from stm32h7xx_it.o(.text.DMA2D_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7a]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8b]">DTS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8a]">ECC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[47]">FDCAN_CAL_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[59]">FPU_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[90]">GFXMMU_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[58]">HASH_RNG_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[78]">HSEM1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32h7xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[51]">I2C3_ER_IRQHandler</a> from stm32h7xx_it.o(.text.I2C3_ER_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[50]">I2C3_EV_IRQHandler</a> from stm32h7xx_it.o(.text.I2C3_EV_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[68]">I2C4_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[67]">I2C4_EV_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a7]">I2C_DMAAbort</a> from stm32h7xx_hal_i2c.o(.text.I2C_DMAAbort) referenced 4 times from stm32h7xx_hal_i2c.o(.text.I2C_ITError)
 <LI><a href="#[9d]">I2C_DMAError</a> from stm32h7xx_hal_i2c.o(.text.I2C_DMAError) referenced 2 times from stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_DMA)
 <LI><a href="#[9d]">I2C_DMAError</a> from stm32h7xx_hal_i2c.o(.text.I2C_DMAError) referenced 2 times from stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Transmit_DMA)
 <LI><a href="#[9c]">I2C_DMAMasterReceiveCplt</a> from stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterReceiveCplt) referenced 2 times from stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_DMA)
 <LI><a href="#[9f]">I2C_DMAMasterTransmitCplt</a> from stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterTransmitCplt) referenced 2 times from stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Transmit_DMA)
 <LI><a href="#[9b]">I2C_Master_ISR_DMA</a> from stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_DMA) referenced 2 times from stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_DMA)
 <LI><a href="#[9b]">I2C_Master_ISR_DMA</a> from stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_DMA) referenced 2 times from stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Transmit_DMA)
 <LI><a href="#[9b]">I2C_Master_ISR_DMA</a> from stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_DMA) referenced 4 times from stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterReceiveCplt)
 <LI><a href="#[9b]">I2C_Master_ISR_DMA</a> from stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_DMA) referenced 4 times from stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterTransmitCplt)
 <LI><a href="#[9b]">I2C_Master_ISR_DMA</a> from stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_DMA) referenced 2 times from stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_DMA)
 <LI><a href="#[9e]">I2C_Master_ISR_IT</a> from stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_IT) referenced 2 times from stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_DMA)
 <LI><a href="#[9e]">I2C_Master_ISR_IT</a> from stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_IT) referenced 2 times from stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_IT)
 <LI><a href="#[9e]">I2C_Master_ISR_IT</a> from stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_IT) referenced 2 times from stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Transmit_DMA)
 <LI><a href="#[a5]">I2C_Slave_ISR_DMA</a> from stm32h7xx_hal_i2c.o(.text.I2C_Slave_ISR_DMA) referenced 4 times from stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterReceiveCplt)
 <LI><a href="#[a5]">I2C_Slave_ISR_DMA</a> from stm32h7xx_hal_i2c.o(.text.I2C_Slave_ISR_DMA) referenced 4 times from stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterTransmitCplt)
 <LI><a href="#[a5]">I2C_Slave_ISR_DMA</a> from stm32h7xx_hal_i2c.o(.text.I2C_Slave_ISR_DMA) referenced 2 times from stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_DMA)
 <LI><a href="#[a6]">I2C_Slave_ISR_IT</a> from stm32h7xx_hal_i2c.o(.text.I2C_Slave_ISR_IT) referenced 2 times from stm32h7xx_hal_i2c.o(.text.I2C_ITError)
 <LI><a href="#[75]">JPEG_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[65]">LPTIM1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[84]">LPTIM2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[85]">LPTIM3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[88]">LPUART1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[61]">LTDC_ER_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[60]">LTDC_IRQHandler</a> from stm32h7xx_it.o(.text.LTDC_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[74]">MDIOS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[73]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[76]">MDMA_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[64]">OCTOSPI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8d]">OCTOSPI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8e]">OTFDEC1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8f]">OTFDEC2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[c]">RTC_TAMP_STAMP_CSS_LSE_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5f]">SAI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[63]">SAI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3b]">SDMMC1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[77]">SDMMC2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[69]">SPDIF_RX_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5c]">SPI4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5d]">SPI5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5e]">SPI6_IRQHandler</a> from stm32h7xx_it.o(.text.SPI6_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a0]">SPI_DMAAbortOnError</a> from stm32h7xx_hal_spi.o(.text.SPI_DMAAbortOnError) referenced 2 times from stm32h7xx_hal_spi.o(.text.HAL_SPI_IRQHandler)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[6f]">SWPMI1_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a8]">StartDefaultTask</a> from freertos.o(.text.StartDefaultTask) referenced 2 times from freertos.o(.text.MX_FREERTOS_Init)
 <LI><a href="#[aa]">StartTask_lowPower</a> from freertos.o(.text.StartTask_lowPower) referenced 2 times from freertos.o(.text.MX_FREERTOS_Init)
 <LI><a href="#[a9]">StartTasktest</a> from freertos.o(.text.StartTasktest) referenced 2 times from freertos.o(.text.MX_FREERTOS_Init)
 <LI><a href="#[9]">SysTick_Handler</a> from cmsis_os2.o(.text.SysTick_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[92]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h7b0xx.o(.text)
 <LI><a href="#[70]">TIM15_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[71]">TIM16_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[72]">TIM17_IRQHandler</a> from stm32h7xx_it.o(.text.TIM17_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32h7xx_it.o(.text.UART4_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5a]">UART7_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5b]">UART8_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[86]">UART9_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a1]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[a2]">UART_DMAError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[a2]">UART_DMAError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[ab]">UART_DMAReceiveCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMAReceiveCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[ac]">UART_DMARxHalfCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMARxHalfCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[a3]">UART_DMATransmitCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[a4]">UART_DMATxHalfCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[87]">USART10_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32h7xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[4f]">USART6_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[8c]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h7b0xx.o(.text) referenced from startup_stm32h7b0xx.o(RESET)
 <LI><a href="#[93]">__main</a> from __main.o(!!!main) referenced from startup_stm32h7b0xx.o(.text)
 <LI><a href="#[de]">__perf_counter_init</a> from perf_counter.o(.text.__perf_counter_init) referenced from perf_counter.o(.init_array)
 <LI><a href="#[95]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[96]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[99]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[98]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[94]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[b3]">com_i2c_rx_cplt</a> from com_component_i2c.o(.text.com_i2c_rx_cplt) referenced 2 times from com_component.o(.text.com_init)
 <LI><a href="#[b4]">com_i2c_start_rx</a> from com_component_i2c.o(.text.com_i2c_start_rx) referenced 2 times from com_component.o(.text.com_init)
 <LI><a href="#[b1]">com_i2c_tx</a> from com_component_i2c.o(.text.com_i2c_tx) referenced 2 times from com_component.o(.text.com_init)
 <LI><a href="#[b2]">com_i2c_tx_cplt</a> from com_component_i2c.o(.text.com_i2c_tx_cplt) referenced 2 times from com_component.o(.text.com_init)
 <LI><a href="#[b0]">com_uart_rx_pack_cplt</a> from com_component_uart.o(.text.com_uart_rx_pack_cplt) referenced 2 times from com_component.o(.text.com_init)
 <LI><a href="#[ad]">com_uart_rx_start</a> from com_component_uart.o(.text.com_uart_rx_start) referenced 2 times from com_component.o(.text.com_init)
 <LI><a href="#[ae]">com_uart_tx</a> from com_component_uart.o(.text.com_uart_tx) referenced 2 times from com_component.o(.text.com_init)
 <LI><a href="#[af]">com_uart_tx_cplt</a> from com_component_uart.o(.text.com_uart_tx_cplt) referenced 2 times from com_component.o(.text.com_init)
 <LI><a href="#[e0]">cs_off_w25q_spi</a> from sfud_port.o(.text.cs_off_w25q_spi) referenced from sfud_port.o(.data.sfud_spi_port_init.user_w25q64_qspi)
 <LI><a href="#[e0]">cs_off_w25q_spi</a> from sfud_port.o(.text.cs_off_w25q_spi) referenced from sfud_port.o(.data.sfud_spi_port_init.user_w25q64_spi)
 <LI><a href="#[df]">cs_on_w25q_spi</a> from sfud_port.o(.text.cs_on_w25q_spi) referenced from sfud_port.o(.data.sfud_spi_port_init.user_w25q64_qspi)
 <LI><a href="#[df]">cs_on_w25q_spi</a> from sfud_port.o(.text.cs_on_w25q_spi) referenced from sfud_port.o(.data.sfud_spi_port_init.user_w25q64_spi)
 <LI><a href="#[bd]">delay_1ms</a> from sfud_port.o(.text.delay_1ms) referenced 2 times from sfud_port.o(.text.sfud_spi_port_init)
 <LI><a href="#[e4]">erase_spiflash</a> from fal_flash_sfud_port.o(.text.erase_spiflash) referenced from fal_flash_sfud_port.o(.data.spi_flash0)
 <LI><a href="#[97]">fputc</a> from common.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[e1]">init_spiflash</a> from fal_flash_sfud_port.o(.text.init_spiflash) referenced from fal_flash_sfud_port.o(.data.spi_flash0)
 <LI><a href="#[9a]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[c1]">ll_iic_rx</a> from sht30.o(.text.ll_iic_rx) referenced 2 times from sht30.o(.text.sht30_init)
 <LI><a href="#[c0]">ll_iic_tx</a> from sht30.o(.text.ll_iic_tx) referenced 2 times from sht30.o(.text.sht30_init)
 <LI><a href="#[b8]">ll_spi_rx</a> from sfud_port.o(.text.ll_spi_rx) referenced 2 times from sfud_port.o(.text.sfud_spi_port_init)
 <LI><a href="#[b9]">ll_spi_tx</a> from sfud_port.o(.text.ll_spi_tx) referenced 2 times from sfud_port.o(.text.sfud_spi_port_init)
 <LI><a href="#[b5]">ll_uart_rx</a> from com_uart_port.o(.text.ll_uart_rx) referenced 2 times from com_uart_port.o(.text.com_user_init)
 <LI><a href="#[b6]">ll_uart_tx</a> from com_uart_port.o(.text.ll_uart_tx) referenced 2 times from com_uart_port.o(.text.com_user_init)
 <LI><a href="#[c7]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[b7]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[c9]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[bf]">qspi_read</a> from sfud_port.o(.text.qspi_read) referenced 2 times from sfud_port.o(.text.sfud_spi_port_init)
 <LI><a href="#[e2]">read_spiflash</a> from fal_flash_sfud_port.o(.text.read_spiflash) referenced from fal_flash_sfud_port.o(.data.spi_flash0)
 <LI><a href="#[cb]">reboot</a> from commend.o(.text.reboot) referenced from commend.o(shellCommand)
 <LI><a href="#[ca]">sfud</a> from commend.o(.text.sfud) referenced from commend.o(shellCommand)
 <LI><a href="#[d5]">shellBackspace</a> from shell.o(.text.shellBackspace) referenced 2 times from shell.o(shellCommand)
 <LI><a href="#[dd]">shellClear</a> from shell.o(.text.shellClear) referenced from shell.o(shellCommand)
 <LI><a href="#[da]">shellCmds</a> from shell.o(.text.shellCmds) referenced from shell.o(shellCommand)
 <LI><a href="#[d6]">shellDelete</a> from shell.o(.text.shellDelete) referenced from shell.o(shellCommand)
 <LI><a href="#[d1]">shellDown</a> from shell.o(.text.shellDown) referenced from shell.o(shellCommand)
 <LI><a href="#[d7]">shellEnter</a> from shell.o(.text.shellEnter) referenced 2 times from shell.o(shellCommand)
 <LI><a href="#[d8]">shellHelp</a> from shell.o(.text.shellHelp) referenced from shell.o(shellCommand)
 <LI><a href="#[dc]">shellKeys</a> from shell.o(.text.shellKeys) referenced from shell.o(shellCommand)
 <LI><a href="#[d3]">shellLeft</a> from shell.o(.text.shellLeft) referenced from shell.o(shellCommand)
 <LI><a href="#[d2]">shellRight</a> from shell.o(.text.shellRight) referenced from shell.o(shellCommand)
 <LI><a href="#[cf]">shellSetVar</a> from shell.o(.text.shellSetVar) referenced from shell.o(shellCommand)
 <LI><a href="#[d4]">shellTab</a> from shell.o(.text.shellTab) referenced from shell.o(shellCommand)
 <LI><a href="#[c6]">shellTask</a> from shell.o(.text.shellTask) referenced 2 times from shell_port.o(.text.userShellInit)
 <LI><a href="#[d0]">shellUp</a> from shell.o(.text.shellUp) referenced from shell.o(shellCommand)
 <LI><a href="#[d9]">shellUsers</a> from shell.o(.text.shellUsers) referenced from shell.o(shellCommand)
 <LI><a href="#[db]">shellVars</a> from shell.o(.text.shellVars) referenced from shell.o(shellCommand)
 <LI><a href="#[bc]">spi_lock</a> from sfud_port.o(.text.spi_lock) referenced 4 times from sfud_port.o(.text.sfud_spi_port_init)
 <LI><a href="#[bb]">spi_unlock</a> from sfud_port.o(.text.spi_unlock) referenced 4 times from sfud_port.o(.text.sfud_spi_port_init)
 <LI><a href="#[ba]">spi_write_read</a> from sfud_port.o(.text.spi_write_read) referenced 2 times from sfud_port.o(.text.sfud_spi_port_init)
 <LI><a href="#[be]">spi_write_read_qspi</a> from sfud_port.o(.text.spi_write_read_qspi) referenced 2 times from sfud_port.o(.text.sfud_spi_port_init)
 <LI><a href="#[cd]">tim_ctrl</a> from commend.o(.text.tim_ctrl) referenced from commend.o(shellCommand)
 <LI><a href="#[cc]">time</a> from commend.o(.text.time) referenced from commend.o(shellCommand)
 <LI><a href="#[c4]">userShellLock</a> from shell_port.o(.text.userShellLock) referenced 2 times from shell_port.o(.text.userShellInit)
 <LI><a href="#[c2]">userShellRead</a> from shell_port.o(.text.userShellRead) referenced 2 times from shell_port.o(.text.userShellInit)
 <LI><a href="#[c5]">userShellUnlock</a> from shell_port.o(.text.userShellUnlock) referenced 2 times from shell_port.o(.text.userShellInit)
 <LI><a href="#[c3]">userShellWrite</a> from shell_port.o(.text.userShellWrite) referenced 2 times from shell_port.o(.text.userShellInit)
 <LI><a href="#[c8]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from event_groups.o(.text.xEventGroupSetBitsFromISR)
 <LI><a href="#[ce]">var</a> from commend.o(.text.var) referenced from commend.o(shellCommand)
 <LI><a href="#[e3]">write_spiflash</a> from fal_flash_sfud_port.o(.text.write_spiflash) referenced from fal_flash_sfud_port.o(.data.spi_flash0)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[93]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2d4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2d5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2d6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ea]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[133]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[ec]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[ee]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f0]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f1]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f2]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2d7]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[f4]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f6]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f7]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f8]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[fa]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[fc]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[fe]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ff]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[100]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[102]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2d8]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[104]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[106]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[108]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[10a]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2d9]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[119]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[10c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[10e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2da]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[2db]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2dc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[110]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2dd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[2de]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2df]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[112]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2e0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2e1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[113]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2e2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2e3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2e4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2e5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[115]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2e6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2e7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2e8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2e9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2ea]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2eb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2ec]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[2ed]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[2ee]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[11e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2ef]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2f0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[2f1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2f2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[2f3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2f4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2f5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[e7]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2f6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[116]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[118]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2f7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[11a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_LTDC_Init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2f8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[166]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[11d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2f9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[11f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>BDMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDMA1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDMA1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>BDMA2_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>BDMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>BDMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>BDMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>BDMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>BDMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DCMI_PSSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DFSDM1_FLT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DFSDM1_FLT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DFSDM1_FLT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DFSDM1_FLT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DFSDM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>GFXMMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>OCTOSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>OTFDEC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_TAMP_STAMP_CSS_LSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>UART9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>USART10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h7b0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[165]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h7b0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2fa]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_alloc
</UL>

<P><STRONG><a name="[124]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_alloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[237]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2fb]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>

<P><STRONG><a name="[127]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_test
</UL>

<P><STRONG><a name="[129]"></a>__2snprintf</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[12b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[12c]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[12a]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[f5]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[130]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[fb]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[103]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[ed]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[131]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[134]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var
</UL>

<P><STRONG><a name="[136]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[139]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_test
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put_rx
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put
</UL>

<P><STRONG><a name="[25b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[25a]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
</UL>

<P><STRONG><a name="[256]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_get_filter_tag_lvl
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
</UL>

<P><STRONG><a name="[239]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_get_try
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_put
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_get
</UL>

<P><STRONG><a name="[13a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2fc]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>

<P><STRONG><a name="[2fd]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
</UL>

<P><STRONG><a name="[2fe]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI6_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ff]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[293]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[300]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[303]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[122]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[305]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[140]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[10f]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[142]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[30b]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[144]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[12d]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[12e]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[12f]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[eb]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[126]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[94]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __2snprintf.o(.text)
<LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[105]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[107]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[128]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[147]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[fd]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[14a]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[f9]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[101]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[98]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[14e]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[30c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[310]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[13f]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[311]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[9a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[157]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[158]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[109]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[10b]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[14b]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[15d]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[146]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[161]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[148]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[141]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[117]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[312]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[150]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[163]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[162]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[168]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[2d3]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[167]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[16c]"></a>ADC_ConfigureBoostMode</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, stm32h7xx_hal_adc.o(.text.ADC_ConfigureBoostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_ConfigureBoostMode &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[16f]"></a>ADC_Enable</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
</UL>

<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ADC_IRQHandler &rArr; HAL_ADC_IRQHandler &rArr; HAL_ADC_LevelOutOfWindowCallback &rArr; osEventFlagsSet &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>BDMA2_Channel2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BDMA2_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BDMA2_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>BDMA2_Channel3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BDMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BDMA2_Channel3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2D_IRQHandler &rArr; HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI6_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[177]"></a>HAL_ADCEx_EndOfSamplingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_adc_ex.o(.text.HAL_ADCEx_EndOfSamplingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>HAL_ADCEx_InjectedConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_adc_ex.o(.text.HAL_ADCEx_InjectedConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>HAL_ADCEx_InjectedQueueOverflowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_adc_ex.o(.text.HAL_ADCEx_InjectedQueueOverflowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>HAL_ADCEx_LevelOutOfWindow2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_adc_ex.o(.text.HAL_ADCEx_LevelOutOfWindow2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>HAL_ADCEx_LevelOutOfWindow3Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_adc_ex.o(.text.HAL_ADCEx_LevelOutOfWindow3Callback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_ADC_AnalogWDGConfig</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_AnalogWDGConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_AnalogWDGConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 776 bytes, Stack size 24 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[174]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, freertos.o(.text.HAL_ADC_ConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_ConvCpltCallback &rArr; HAL_ADC_Start_IT &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[171]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 646 bytes, Stack size 32 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_ADC_IRQHandler &rArr; HAL_ADC_LevelOutOfWindowCallback &rArr; osEventFlagsSet &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedQueueOverflowCallback
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_LevelOutOfWindow3Callback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_LevelOutOfWindow2Callback
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConvCpltCallback
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_EndOfSamplingCallback
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>HAL_ADC_Init</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertos.o(.text.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_ADC_LevelOutOfWindowCallback &rArr; osEventFlagsSet &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[176]"></a>HAL_ADC_Start_IT</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Start_IT &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[186]"></a>HAL_DMA2D_CLUTLoadingCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dma2d.o(.text.HAL_DMA2D_CLUTLoadingCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32h7xx_hal_dma2d.o(.text.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[173]"></a>HAL_DMA2D_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, stm32h7xx_hal_dma2d.o(.text.HAL_DMA2D_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_CLUTLoadingCpltCallback
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_LineEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32h7xx_hal_dma2d.o(.text.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
</UL>

<P><STRONG><a name="[185]"></a>HAL_DMA2D_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dma2d.o(.text.HAL_DMA2D_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dma2d.o(.text.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[189]"></a>HAL_DMA_Abort</STRONG> (Thumb, 1260 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 668 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAError
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_DMA_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[172]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 2906 bytes, Stack size 32 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDMA2_Channel3_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDMA2_Channel2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>HAL_DMA_Init</STRONG> (Thumb, 1778 bytes, Stack size 32 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[18b]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 894 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_DMA
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Transmit_DMA
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterReceiveCplt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterTransmitCplt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[197]"></a>HAL_GPIO_Init</STRONG> (Thumb, 414 bytes, Stack size 44 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[22f]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[207]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_off_w25q_spi
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_on_w25q_spi
</UL>

<P><STRONG><a name="[170]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
</UL>

<P><STRONG><a name="[209]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[20a]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_AddrCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[18d]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_ER_IRQHandler
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_EV_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_EV_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[18f]"></a>HAL_I2C_Init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_ListenCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[191]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sht30.o(.text.HAL_I2C_MasterRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MasterRxCpltCallback &rArr; com_i2c_rx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_rx_cplt
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSeqCplt
</UL>

<P><STRONG><a name="[192]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sht30.o(.text.HAL_I2C_MasterTxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_MasterTxCpltCallback &rArr; com_i2c_tx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_tx_cplt
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSeqCplt
</UL>

<P><STRONG><a name="[193]"></a>HAL_I2C_Master_Seq_Receive_DMA</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_Master_Seq_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_iic_rx
</UL>

<P><STRONG><a name="[267]"></a>HAL_I2C_Master_Seq_Receive_IT</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_Master_Seq_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_iic_rx
</UL>

<P><STRONG><a name="[194]"></a>HAL_I2C_Master_Seq_Transmit_DMA</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_Master_Seq_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_iic_tx
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_MemRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_MemTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
</UL>

<P><STRONG><a name="[190]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 356 bytes, Stack size 256 bytes, i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[198]"></a>HAL_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>HAL_InitTick</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_LTDC_Init</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_LineEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 402 bytes, Stack size 248 bytes, ltdc.o(.text.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(.text.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[184]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_BDMA2_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[183]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_BDMA2_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SystemReset))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[20e]"></a>HAL_OSPIM_Config</STRONG> (Thumb, 1212 bytes, Stack size 96 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_OSPIM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_OSPI_Command</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_ConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_read
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_OSPI_Init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_OSPI_MspInit</STRONG> (Thumb, 302 bytes, Stack size 256 bytes, octospi.o(.text.HAL_OSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>

<P><STRONG><a name="[1af]"></a>HAL_OSPI_Receive</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_OSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_read
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16e]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 980 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
</UL>

<P><STRONG><a name="[196]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2476 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 600 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[19d]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[16d]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19e]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1750 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sfud_port.o(.text.HAL_SPI_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_ErrorCallback &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_IRQHandler &rArr; HAL_SPI_ErrorCallback &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_SuspendCallback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6_IRQHandler
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_SPI_Init</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI6_Init
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_SPI_Receive</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_spi_rx
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sfud_port.o(.text.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_SPI_SuspendCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_SuspendCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 612 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_spi_tx
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sfud_port.o(.text.HAL_SPI_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_TxCpltCallback &rArr; com_spi_tx_cplt &rArr; com_spi_try_communite &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_tx_cplt
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sfud_port.o(.text.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[212]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[19f]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[211]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 1188 bytes, Stack size 24 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[226]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 436 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[217]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_UARTEx_GetRxEventType</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_GetRxEventType))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_UARTEx_ReceiveToIdle_DMA</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_ReceiveToIdle_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_uart_rx
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, com_uart_port.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_UARTEx_RxEventCallback &rArr; com_uart_rx_pack_cplt &rArr; com_queue_put_rx &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_GetRxEventType
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_rx_pack_cplt
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[216]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[215]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1df]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, com_uart_port.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[1db]"></a>HAL_UART_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1136 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; com_uart_rx_pack_cplt &rArr; com_queue_put_rx &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_UART_MspInit</STRONG> (Thumb, 518 bytes, Stack size 248 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[234]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, shell_port.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[235]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_UART_Transmit</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_uart_tx
</UL>

<P><STRONG><a name="[1de]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, com_uart_port.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; com_uart_tx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_tx_cplt
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[236]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.I2C3_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C3_ER_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.I2C3_EV_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>LTDC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f9]"></a>MX_ADC2_Init</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, adc.o(.text.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_AnalogWDGConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fc]"></a>MX_BDMA2_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bdma2.o(.text.MX_BDMA2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_BDMA2_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>MX_DMA2D_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dma2d.o(.text.MX_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_DMA2D_Init &rArr; HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>MX_DMA_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[200]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, freertos.o(.text.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[206]"></a>MX_GPIO_Init</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>MX_I2C3_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>MX_LTDC_Init</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, ltdc.o(.text.MX_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = MX_LTDC_Init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20d]"></a>MX_OCTOSPI1_Init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, octospi.o(.text.MX_OCTOSPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = MX_OCTOSPI1_Init &rArr; HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPIM_Config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20f]"></a>MX_SPI6_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spi.o(.text.MX_SPI6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = MX_SPI6_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[210]"></a>MX_TIM12_Init</STRONG> (Thumb, 292 bytes, Stack size 96 bytes, tim.o(.text.MX_TIM12_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_TIM12_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[214]"></a>MX_UART4_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, usart.o(.text.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[218]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI6_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.SPI6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SPI6_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_SPI_ErrorCallback &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>StartDefaultTask</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, freertos.o(.text.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = StartDefaultTask &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ins330_handle
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_get
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_inquire_data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ins330_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.text.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[aa]"></a>StartTask_lowPower</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, freertos.o(.text.StartTask_lowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = StartTask_lowPower &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.text.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[a9]"></a>StartTasktest</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, freertos.o(.text.StartTasktest))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = StartTasktest &rArr; sfud_test &rArr; sfud_write &rArr; page256_or_1_byte_write &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ins330_show_test
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht30_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_test
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_get_device
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_set_duty
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_set_freq
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_start
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_text_color_enabled
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_fmt
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userShellInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.text.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmsis_os2.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[233]"></a>SystemClock_Config</STRONG> (Thumb, 190 bytes, Stack size 128 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[268]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>SystemInit</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>TIM17_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c9]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; com_uart_rx_pack_cplt &rArr; com_queue_put_rx &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e4]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1e5]"></a>UART_CheckIdleState</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1e3]"></a>UART_SetConfig</STRONG> (Thumb, 1232 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1d7]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>

<P><STRONG><a name="[1e7]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; com_uart_rx_pack_cplt &rArr; com_queue_put_rx &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h7b0xx.o(RESET)
</UL>
<P><STRONG><a name="[238]"></a>__kfifo_get</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, kfifo.o(.text.__kfifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __kfifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userShellRead
</UL>

<P><STRONG><a name="[23a]"></a>__kfifo_get_try</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, kfifo.o(.text.__kfifo_get_try))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_check_task
</UL>

<P><STRONG><a name="[23b]"></a>__kfifo_put</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, kfifo.o(.text.__kfifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __kfifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put_rx
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put
</UL>

<P><STRONG><a name="[de]"></a>__perf_counter_init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, perf_counter.o(.text.__perf_counter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __perf_counter_init &rArr; get_system_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_os_patch_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> perf_counter.o(.init_array)
</UL>
<P><STRONG><a name="[23d]"></a>__perf_os_patch_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, perf_counter.o(.text.__perf_os_patch_init))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_counter_init
</UL>

<P><STRONG><a name="[120]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[16b]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2b1]"></a>calculate_timer_values</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, tim_pwm.o(.text.calculate_timer_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calculate_timer_values
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_set_freq
</UL>

<P><STRONG><a name="[240]"></a>com_check_task</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, com_component.o(.text.com_check_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_get_try
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_irqrestore
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_try_communite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_start_rx
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_rx_cplt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_tx_cplt
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_tx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_tx_cplt
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_tx
</UL>

<P><STRONG><a name="[243]"></a>com_i2c_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, com_component_i2c.o(.text.com_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = com_i2c_init &rArr; com_queue_init &rArr; kfifo_alloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_init_iic
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht30_init
</UL>

<P><STRONG><a name="[b3]"></a>com_i2c_rx_cplt</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, com_component_i2c.o(.text.com_i2c_rx_cplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_i2c_rx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_check_task
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_component.o(.text.com_init)
</UL>
<P><STRONG><a name="[b4]"></a>com_i2c_start_rx</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, com_component_i2c.o(.text.com_i2c_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = com_i2c_start_rx &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_check_task
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put_rx
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_component.o(.text.com_init)
</UL>
<P><STRONG><a name="[b1]"></a>com_i2c_tx</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, com_component_i2c.o(.text.com_i2c_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = com_i2c_tx &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_check_task
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_tx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_component.o(.text.com_init)
</UL>
<P><STRONG><a name="[b2]"></a>com_i2c_tx_cplt</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, com_component_i2c.o(.text.com_i2c_tx_cplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_i2c_tx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_check_task
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_component.o(.text.com_init)
</UL>
<P><STRONG><a name="[24a]"></a>com_init</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, com_component.o(.text.com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = com_init &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_user_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>

<P><STRONG><a name="[244]"></a>com_queue_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, com_component.o(.text.com_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = com_queue_init &rArr; kfifo_alloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_init
</UL>

<P><STRONG><a name="[245]"></a>com_queue_init_iic</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, com_component.o(.text.com_queue_init_iic))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_init
</UL>

<P><STRONG><a name="[248]"></a>com_queue_put</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, com_component.o(.text.com_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_put
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_irqrestore
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_tx
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_tx
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_tx
</UL>

<P><STRONG><a name="[246]"></a>com_queue_put_rx</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, com_component.o(.text.com_queue_put_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = com_queue_put_rx &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_put
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_irqrestore
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_start_rx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_rx_pack_cplt
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_start_rx
</UL>

<P><STRONG><a name="[252]"></a>com_register_driver</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, com_component.o(.text.com_register_driver))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_user_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>

<P><STRONG><a name="[21d]"></a>com_rx_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, com_component.o(.text.com_rx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = com_rx_get &rArr; __kfifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_irqrestore
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[21c]"></a>com_rx_inquire_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, com_component.o(.text.com_rx_inquire_data))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[253]"></a>com_rx_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com_component.o(.text.com_rx_start))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_user_init
</UL>

<P><STRONG><a name="[247]"></a>com_rx_wait</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, com_component.o(.text.com_rx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = com_rx_wait &rArr; get_system_us
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_start_rx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_start_rx
</UL>

<P><STRONG><a name="[24d]"></a>com_spi_rx_cplt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, com_component_spi.o(.text.com_spi_rx_cplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = com_spi_rx_cplt &rArr; com_spi_try_communite &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_try_communite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_spi_rx
</UL>

<P><STRONG><a name="[24f]"></a>com_spi_start_rx</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, com_component_spi.o(.text.com_spi_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = com_spi_start_rx &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_try_communite
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put_rx
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[24e]"></a>com_spi_try_communite</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, com_component_spi.o(.text.com_spi_try_communite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_spi_try_communite &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_check_task
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_start_rx
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_tx
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_rx_cplt
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_tx_cplt
</UL>

<P><STRONG><a name="[250]"></a>com_spi_tx</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, com_component_spi.o(.text.com_spi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = com_spi_tx &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_try_communite
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_tx_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[1c7]"></a>com_spi_tx_cplt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, com_component_spi.o(.text.com_spi_tx_cplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = com_spi_tx_cplt &rArr; com_spi_try_communite &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_try_communite
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_spi_tx
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
</UL>

<P><STRONG><a name="[249]"></a>com_tx_wait</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, com_component.o(.text.com_tx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = com_tx_wait &rArr; get_system_us
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_tx
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_tx
</UL>

<P><STRONG><a name="[b0]"></a>com_uart_rx_pack_cplt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, com_component_uart.o(.text.com_uart_rx_pack_cplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = com_uart_rx_pack_cplt &rArr; com_queue_put_rx &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_component.o(.text.com_init)
</UL>
<P><STRONG><a name="[ad]"></a>com_uart_rx_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, com_component_uart.o(.text.com_uart_rx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = com_uart_rx_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_component.o(.text.com_init)
</UL>
<P><STRONG><a name="[ae]"></a>com_uart_tx</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, com_component_uart.o(.text.com_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = com_uart_tx &rArr; com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_check_task
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userShellWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_component.o(.text.com_init)
</UL>
<P><STRONG><a name="[af]"></a>com_uart_tx_cplt</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, com_component_uart.o(.text.com_uart_tx_cplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_uart_tx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_check_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_component.o(.text.com_init)
</UL>
<P><STRONG><a name="[251]"></a>com_user_init</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, com_uart_port.o(.text.com_user_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = com_user_init &rArr; com_init &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_start
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_register_driver
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>cs_off_w25q_spi</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sfud_port.o(.text.cs_off_w25q_spi))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sfud_port.o(.data.sfud_spi_port_init.user_w25q64_spi)
<LI> sfud_port.o(.data.sfud_spi_port_init.user_w25q64_qspi)
</UL>
<P><STRONG><a name="[df]"></a>cs_on_w25q_spi</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sfud_port.o(.text.cs_on_w25q_spi))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sfud_port.o(.data.sfud_spi_port_init.user_w25q64_spi)
<LI> sfud_port.o(.data.sfud_spi_port_init.user_w25q64_qspi)
</UL>
<P><STRONG><a name="[bd]"></a>delay_1ms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfud_port.o(.text.delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = delay_1ms &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[254]"></a>elog_get_filter_tag_lvl</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, elog.o(.text.elog_get_filter_tag_lvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = elog_get_filter_tag_lvl &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_unlock
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_lock
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[220]"></a>elog_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, elog.o(.text.elog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = elog_init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_unlock
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_lock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[1bb]"></a>elog_output</STRONG> (Thumb, 2468 bytes, Stack size 88 bytes, elog.o(.text.elog_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_get_t_info
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_get_p_info
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_get_time
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_strcpy
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_get_filter_tag_lvl
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_unlock
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_lock
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fmt_enabled
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_set_freq
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_start
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_set_fmt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_ctrl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_start_rx
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_tx
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_start_rx
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_tx
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_strcpy
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_get_filter_tag_lvl
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fmt_enabled
</UL>

<P><STRONG><a name="[25e]"></a>elog_port_get_p_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, elog_port.o(.text.elog_port_get_p_info))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[25f]"></a>elog_port_get_t_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, elog_port.o(.text.elog_port_get_t_info))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[25d]"></a>elog_port_get_time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, elog_port.o(.text.elog_port_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[258]"></a>elog_port_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, elog_port.o(.text.elog_port_init))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
</UL>

<P><STRONG><a name="[261]"></a>elog_port_output</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, elog_port.o(.text.elog_port_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = elog_port_output &rArr; com_uart_tx &rArr; com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[255]"></a>elog_port_output_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, elog_port.o(.text.elog_port_output_lock))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_get_filter_tag_lvl
</UL>

<P><STRONG><a name="[257]"></a>elog_port_output_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, elog_port.o(.text.elog_port_output_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_get_filter_tag_lvl
</UL>

<P><STRONG><a name="[22d]"></a>elog_raw_output</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, elog.o(.text.elog_raw_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = elog_raw_output &rArr; elog_port_output &rArr; com_uart_tx &rArr; com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_unlock
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_port_output_lock
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_spiflash
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_spiflash
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_spiflash
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
</UL>

<P><STRONG><a name="[221]"></a>elog_set_fmt</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, elog.o(.text.elog_set_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = elog_set_fmt &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[222]"></a>elog_set_text_color_enabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, elog.o(.text.elog_set_text_color_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[223]"></a>elog_start</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, elog.o(.text.elog_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = elog_start &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[25c]"></a>elog_strcpy</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, elog_utils.o(.text.elog_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = elog_strcpy &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[23f]"></a>fal_flash_device_find</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, fal_flash.o(.text.fal_flash_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = fal_flash_device_find &rArr; elog_raw_output &rArr; elog_port_output &rArr; com_uart_tx &rArr; com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
</UL>

<P><STRONG><a name="[263]"></a>fal_flash_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, fal_flash.o(.text.fal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = fal_flash_init &rArr; elog_raw_output &rArr; elog_port_output &rArr; com_uart_tx &rArr; com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[22a]"></a>fal_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fal.o(.text.fal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = fal_init &rArr; fal_partition_init &rArr; fal_show_part_table &rArr; elog_raw_output &rArr; elog_port_output &rArr; com_uart_tx &rArr; com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[264]"></a>fal_partition_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fal_partition.o(.text.fal_partition_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = fal_partition_init &rArr; fal_show_part_table &rArr; elog_raw_output &rArr; elog_port_output &rArr; com_uart_tx &rArr; com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_update_part_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[265]"></a>fal_show_part_table</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, fal_partition.o(.text.fal_show_part_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = fal_show_part_table &rArr; elog_raw_output &rArr; elog_port_output &rArr; com_uart_tx &rArr; com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[97]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, common.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[23c]"></a>get_system_ticks</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, perf_counter.o(.text.get_system_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_counter_init
</UL>

<P><STRONG><a name="[24c]"></a>get_system_us</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, perf_counter.o(.text.get_system_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_system_us
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_wait
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_tx_wait
</UL>

<P><STRONG><a name="[266]"></a>init_cycle_counter</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, perf_counter.o(.text.init_cycle_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_cycle_counter &rArr; get_system_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_os_patch_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21e]"></a>ins330_handle</STRONG> (Thumb, 524 bytes, Stack size 8 bytes, ins330.o(.text.ins330_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ins330_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[21a]"></a>ins330_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ins330.o(.text.ins330_init))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[230]"></a>ins330_show_test</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ins330.o(.text.ins330_show_test))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[24b]"></a>kfifo_alloc</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, kfifo.o(.text.kfifo_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = kfifo_alloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[c1]"></a>ll_iic_rx</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sht30.o(.text.ll_iic_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ll_iic_rx &rArr; HAL_I2C_Master_Seq_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_DMA
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sht30.o(.text.sht30_init)
</UL>
<P><STRONG><a name="[c0]"></a>ll_iic_tx</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sht30.o(.text.ll_iic_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ll_iic_tx &rArr; HAL_I2C_Master_Seq_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Transmit_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sht30.o(.text.sht30_init)
</UL>
<P><STRONG><a name="[b8]"></a>ll_spi_rx</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sfud_port.o(.text.ll_spi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ll_spi_rx &rArr; com_spi_rx_cplt &rArr; com_spi_try_communite &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_rx_cplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[b9]"></a>ll_spi_tx</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sfud_port.o(.text.ll_spi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ll_spi_tx &rArr; com_spi_tx_cplt &rArr; com_spi_try_communite &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_tx_cplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[b5]"></a>ll_uart_rx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, com_uart_port.o(.text.ll_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ll_uart_rx &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_uart_port.o(.text.com_user_init)
</UL>
<P><STRONG><a name="[b6]"></a>ll_uart_tx</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, com_uart_port.o(.text.ll_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ll_uart_tx &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_uart_port.o(.text.com_user_init)
</UL>
<P><STRONG><a name="[11b]"></a>main</STRONG> (Thumb, 310 bytes, Stack size 192 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_LTDC_Init &rArr; HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_user_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI1_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI6_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LTDC_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA2D_Init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_BDMA2_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[21b]"></a>osDelay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmsis_os2.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask_lowPower
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userShellRead
</UL>

<P><STRONG><a name="[205]"></a>osEventFlagsNew</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, cmsis_os2.o(.text.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osEventFlagsNew &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[180]"></a>osEventFlagsSet</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cmsis_os2.o(.text.osEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osEventFlagsSet &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
</UL>

<P><STRONG><a name="[269]"></a>osKernelInitialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cmsis_os2.o(.text.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26a]"></a>osKernelStart</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cmsis_os2.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[201]"></a>osMutexNew</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cmsis_os2.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[203]"></a>osSemaphoreNew</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, cmsis_os2.o(.text.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osSemaphoreNew &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[204]"></a>osThreadNew</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, cmsis_os2.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[291]"></a>pvPortMalloc</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>

<P><STRONG><a name="[2c3]"></a>pxPortInitialiseStack</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[cb]"></a>reboot</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, commend.o(.text.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = reboot &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commend.o(shellCommand)
</UL>
<P><STRONG><a name="[ca]"></a>sfud</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, commend.o(.text.sfud))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = sfud &rArr; sfud_test &rArr; sfud_write &rArr; page256_or_1_byte_write &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_test
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commend.o(shellCommand)
</UL>
<P><STRONG><a name="[294]"></a>sfud_chip_erase</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, sfud.o(.text.sfud_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = sfud_chip_erase &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[295]"></a>sfud_device_init</STRONG> (Thumb, 1084 bytes, Stack size 56 bytes, sfud.o(.text.sfud_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = sfud_device_init &rArr; sfud_read_sfdp &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_init
</UL>

<P><STRONG><a name="[262]"></a>sfud_erase</STRONG> (Thumb, 688 bytes, Stack size 72 bytes, sfud.o(.text.sfud_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = sfud_erase &rArr; sfud_chip_erase &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_sfdp_get_suitable_eraser
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_test
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_spiflash
</UL>

<P><STRONG><a name="[22b]"></a>sfud_get_device</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sfud.o(.text.sfud_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spiflash
</UL>

<P><STRONG><a name="[29a]"></a>sfud_get_device_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sfud.o(.text.sfud_get_device_table))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_test
</UL>

<P><STRONG><a name="[229]"></a>sfud_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sfud.o(.text.sfud_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = sfud_init &rArr; sfud_device_init &rArr; sfud_read_sfdp &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[27d]"></a>sfud_log_debug</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, sfud_port.o(.text.sfud_log_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = sfud_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_sfdp_get_suitable_eraser
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
</UL>

<P><STRONG><a name="[27c]"></a>sfud_log_info</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, sfud_port.o(.text.sfud_log_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_read
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
</UL>

<P><STRONG><a name="[292]"></a>sfud_read</STRONG> (Thumb, 424 bytes, Stack size 64 bytes, sfud.o(.text.sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = sfud_read &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_test
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_spiflash
</UL>

<P><STRONG><a name="[297]"></a>sfud_read_sfdp</STRONG> (Thumb, 1416 bytes, Stack size 96 bytes, sfud_sfdp.o(.text.sfud_read_sfdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = sfud_read_sfdp &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[299]"></a>sfud_sfdp_get_suitable_eraser</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sfud_sfdp.o(.text.sfud_sfdp_get_suitable_eraser))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = sfud_sfdp_get_suitable_eraser &rArr; sfud_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[296]"></a>sfud_spi_port_init</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, sfud_port.o(.text.sfud_spi_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = sfud_spi_port_init &rArr; com_init &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_register_driver
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[22c]"></a>sfud_test</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, sfud_port.o(.text.sfud_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = sfud_test &rArr; sfud_write &rArr; page256_or_1_byte_write &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_get_device_table
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud
</UL>

<P><STRONG><a name="[29b]"></a>sfud_write</STRONG> (Thumb, 792 bytes, Stack size 64 bytes, sfud.o(.text.sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = sfud_write &rArr; page256_or_1_byte_write &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_test
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_spiflash
</UL>

<P><STRONG><a name="[298]"></a>sfud_write_status</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, sfud.o(.text.sfud_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = sfud_write_status &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[d5]"></a>shellBackspace</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shell.o(.text.shellBackspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellBackspace &rArr; shellDeleteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDeleteByte
</UL>
<BR>[Address Reference Count : 2]<UL><LI> shell.o(shellCommand)
<LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[dd]"></a>shellClear</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, shell.o(.text.shellClear))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[da]"></a>shellCmds</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, shell.o(.text.shellCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = shellCmds &rArr; shellListItem &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[d6]"></a>shellDelete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, shell.o(.text.shellDelete))
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[29c]"></a>shellDeleteByte</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, shell.o(.text.shellDeleteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellDeleteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellBackspace
</UL>

<P><STRONG><a name="[d1]"></a>shellDown</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, shell.o(.text.shellDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellDown &rArr; shellHistory
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[d7]"></a>shellEnter</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, shell.o(.text.shellEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = shellEnter &rArr; shellExec &rArr; shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> shell.o(shellCommand)
<LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[29f]"></a>shellExec</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, shell.o(.text.shellExec))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = shellExec &rArr; shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellEnter
</UL>

<P><STRONG><a name="[2a3]"></a>shellExtParsePara</STRONG> (Thumb, 568 bytes, Stack size 16 bytes, shell_ext.o(.text.shellExtParsePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shellExtParsePara &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellGetVarValue
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
</UL>

<P><STRONG><a name="[2a5]"></a>shellExtRun</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, shell_ext.o(.text.shellExtRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = shellExtRun &rArr; shellExtParsePara &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[2a4]"></a>shellGetVarValue</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, shell.o(.text.shellGetVarValue))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
</UL>

<P><STRONG><a name="[2a6]"></a>shellHandler</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, shell.o(.text.shellHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shellHandler &rArr; shellInsertByte &rArr; shellWritePrompt
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInsertByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTask
</UL>

<P><STRONG><a name="[d8]"></a>shellHelp</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, shell.o(.text.shellHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shellHelp &rArr; shellWriteCommandHelp &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandHelp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[2a9]"></a>shellInit</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, shell.o(.text.shellInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shellInit &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userShellInit
</UL>

<P><STRONG><a name="[2a7]"></a>shellInsertByte</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, shell.o(.text.shellInsertByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shellInsertByte &rArr; shellWritePrompt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHandler
</UL>

<P><STRONG><a name="[dc]"></a>shellKeys</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, shell.o(.text.shellKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = shellKeys &rArr; shellListItem &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[d3]"></a>shellLeft</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, shell.o(.text.shellLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[29d]"></a>shellListItem</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, shell.o(.text.shellListItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = shellListItem &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellKeys
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellVars
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellCmds
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellUsers
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
</UL>

<P><STRONG><a name="[d2]"></a>shellRight</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, shell.o(.text.shellRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shellRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[2a2]"></a>shellRunCommand</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, shell.o(.text.shellRunCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = shellRunCommand &rArr; shellExtRun &rArr; shellExtParsePara &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtRun
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteReturnValue
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
</UL>

<P><STRONG><a name="[2a1]"></a>shellSeekCommand</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, shell.o(.text.shellSeekCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExtParsePara
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellExec
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandHelp
</UL>

<P><STRONG><a name="[cf]"></a>shellSetVar</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, shell.o(.text.shellSetVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = shellSetVar &rArr; shellSetVarValue &rArr; shellShowVar
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[2ac]"></a>shellSetVarValue</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, shell.o(.text.shellSetVarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shellSetVarValue &rArr; shellShowVar
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellShowVar
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVar
</UL>

<P><STRONG><a name="[d4]"></a>shellTab</STRONG> (Thumb, 1124 bytes, Stack size 48 bytes, shell.o(.text.shellTab))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = shellTab &rArr; shellWriteCommandHelp &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWriteCommandHelp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellWritePrompt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[c6]"></a>shellTask</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, shell.o(.text.shellTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = shellTask &rArr; shellHandler &rArr; shellInsertByte &rArr; shellWritePrompt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_port.o(.text.userShellInit)
</UL>
<P><STRONG><a name="[d0]"></a>shellUp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shell.o(.text.shellUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellUp &rArr; shellHistory
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHistory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[d9]"></a>shellUsers</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, shell.o(.text.shellUsers))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = shellUsers &rArr; shellListItem &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[db]"></a>shellVars</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, shell.o(.text.shellVars))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = shellVars &rArr; shellListItem &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellListItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(shellCommand)
</UL>
<P><STRONG><a name="[22e]"></a>sht30_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sht30.o(.text.sht30_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sht30_init &rArr; com_i2c_init &rArr; com_queue_init &rArr; kfifo_alloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[bc]"></a>spi_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sfud_port.o(.text.spi_lock))
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[bb]"></a>spi_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sfud_port.o(.text.spi_unlock))
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[241]"></a>spin_lock_irqrestore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kfifo.o(.text.spin_lock_irqrestore))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_get
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_check_task
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put_rx
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userShellRead
</UL>

<P><STRONG><a name="[242]"></a>spin_unlock_irqrestore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, kfifo.o(.text.spin_unlock_irqrestore))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_get
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_check_task
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put_rx
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_queue_put
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userShellRead
</UL>

<P><STRONG><a name="[cd]"></a>tim_ctrl</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, commend.o(.text.tim_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = tim_ctrl &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_set_duty
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_set_freq
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_get_freq
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_get_duty
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commend.o(shellCommand)
</UL>
<P><STRONG><a name="[2ae]"></a>tim_pwm_get_duty</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, tim_pwm.o(.text.tim_pwm_get_duty))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_ctrl
</UL>

<P><STRONG><a name="[2af]"></a>tim_pwm_get_freq</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tim_pwm.o(.text.tim_pwm_get_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tim_pwm_get_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_ctrl
</UL>

<P><STRONG><a name="[225]"></a>tim_pwm_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tim_pwm.o(.text.tim_pwm_init))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[228]"></a>tim_pwm_set_duty</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, tim_pwm.o(.text.tim_pwm_set_duty))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_set_freq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_ctrl
</UL>

<P><STRONG><a name="[227]"></a>tim_pwm_set_freq</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, tim_pwm.o(.text.tim_pwm_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tim_pwm_set_freq &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_set_duty
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_timer_values
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_ctrl
</UL>

<P><STRONG><a name="[cc]"></a>time</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, commend.o(.text.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = time &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_us
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commend.o(shellCommand)
</UL>
<P><STRONG><a name="[21f]"></a>userShellInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, shell_port.o(.text.userShellInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = userShellInit &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[c4]"></a>userShellLock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, shell_port.o(.text.userShellLock))
<BR>[Address Reference Count : 1]<UL><LI> shell_port.o(.text.userShellInit)
</UL>
<P><STRONG><a name="[c2]"></a>userShellRead</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, shell_port.o(.text.userShellRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = userShellRead &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kfifo_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_irqrestore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_port.o(.text.userShellInit)
</UL>
<P><STRONG><a name="[c5]"></a>userShellUnlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, shell_port.o(.text.userShellUnlock))
<BR>[Address Reference Count : 1]<UL><LI> shell_port.o(.text.userShellInit)
</UL>
<P><STRONG><a name="[c3]"></a>userShellWrite</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, shell_port.o(.text.userShellWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = userShellWrite &rArr; com_uart_tx &rArr; com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell_port.o(.text.userShellInit)
</UL>
<P><STRONG><a name="[27f]"></a>uxListRemove</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2b5]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cmsis_os2.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2c4]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cmsis_os2.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[c8]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, event_groups.o(.text.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(.text.xEventGroupSetBitsFromISR)
</UL>
<P><STRONG><a name="[284]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
</UL>

<P><STRONG><a name="[2c2]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[281]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[280]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[283]"></a>vPortEnterCritical</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[285]"></a>vPortExitCritical</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[287]"></a>vPortFree</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[2b9]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2c1]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[272]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[277]"></a>vQueueDelete</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, queue.o(.text.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[28c]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[26b]"></a>vTaskDelay</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[2bd]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[290]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2b3]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2b2]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[2b4]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(.text.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[270]"></a>vTaskStartScheduler</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[28a]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[219]"></a>vTaskSwitchContext</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ce]"></a>var</STRONG> (Thumb, 824 bytes, Stack size 56 bytes, commend.o(.text.var))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = var &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commend.o(shellCommand)
</UL>
<P><STRONG><a name="[224]"></a>var_init</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, commend.o(.text.var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = var_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTasktest
</UL>

<P><STRONG><a name="[26d]"></a>xEventGroupCreate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[26c]"></a>xEventGroupCreateStatic</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xEventGroupCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[26f]"></a>xEventGroupSetBits</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, event_groups.o(.text.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
</UL>

<P><STRONG><a name="[26e]"></a>xEventGroupSetBitsFromISR</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, event_groups.o(.text.xEventGroupSetBitsFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[2b7]"></a>xPortStartScheduler</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[232]"></a>xPortSysTickHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(.text.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[278]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, queue.o(.text.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[274]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, queue.o(.text.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[202]"></a>xQueueCreateMutex</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(.text.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[271]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, queue.o(.text.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[275]"></a>xQueueGenericCreate</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[273]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
</UL>

<P><STRONG><a name="[276]"></a>xQueueGenericSend</STRONG> (Thumb, 550 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[2c0]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>

<P><STRONG><a name="[28d]"></a>xQueueReceive</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2be]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[27a]"></a>xTaskCreate</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userShellInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[279]"></a>xTaskCreateStatic</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[231]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[289]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[2bc]"></a>xTaskIncrementTick</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2bf]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[28f]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[28b]"></a>xTaskResumeAll</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2b6]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2b8]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, timers.o(.text.xTimerPendFunctionCallFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
</UL>

<P><STRONG><a name="[151]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2c6]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[2c5]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[2c9]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[2c7]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[2c8]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[152]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15c]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[153]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15b]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2ca]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[155]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2cb]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[2ad]"></a>__hardfp_atof</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_ctrl
</UL>

<P><STRONG><a name="[2cf]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[2ce]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[160]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[16a]"></a>__support_ldexp</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __support_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[132]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2cc]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[95]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[2d0]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[313]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[314]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[2b0]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_pwm_get_freq
</UL>

<P><STRONG><a name="[315]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[10d]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[316]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[317]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[15a]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[ef]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[f3]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[2d1]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[2cd]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[14d]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[15f]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[15e]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2d2]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1b6]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1b7]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[18a]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[18c]"></a>DMA_SetConfig</STRONG> (Thumb, 956 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1aa]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>

<P><STRONG><a name="[9e]"></a>I2C_Master_ISR_IT</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = I2C_Master_ISR_IT &rArr; I2C_ITMasterCplt &rArr; HAL_I2C_MasterRxCpltCallback &rArr; com_i2c_rx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSeqCplt
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Transmit_DMA)
<LI> stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_IT)
<LI> stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_DMA)
</UL>
<P><STRONG><a name="[1f3]"></a>I2C_ITMasterSeqCplt</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITMasterSeqCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_ITMasterSeqCplt &rArr; HAL_I2C_MasterRxCpltCallback &rArr; com_i2c_rx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
</UL>

<P><STRONG><a name="[1f0]"></a>I2C_ITMasterCplt</STRONG> (Thumb, 320 bytes, Stack size 12 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITMasterCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_ITMasterCplt &rArr; HAL_I2C_MasterRxCpltCallback &rArr; com_i2c_rx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
</UL>

<P><STRONG><a name="[18e]"></a>I2C_ITError</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetState
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterReceiveCplt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAError
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAMasterTransmitCplt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_DMA
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ISR_IT
</UL>

<P><STRONG><a name="[a6]"></a>I2C_Slave_ISR_IT</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.I2C_Slave_ISR_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Slave_ISR_IT &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_i2c.o(.text.I2C_ITError)
</UL>
<P><STRONG><a name="[1f4]"></a>I2C_ITSlaveCplt</STRONG> (Thumb, 602 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITSlaveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[1f6]"></a>I2C_ITSlaveSeqCplt</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITSlaveSeqCplt))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[1ed]"></a>I2C_ITAddrCplt</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITAddrCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ITAddrCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_DMA
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[9b]"></a>I2C_Master_ISR_DMA</STRONG> (Thumb, 434 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = I2C_Master_ISR_DMA &rArr; I2C_ITMasterCplt &rArr; HAL_I2C_MasterRxCpltCallback &rArr; com_i2c_rx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterCplt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITMasterSeqCplt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Address Reference Count : 5]<UL><LI> stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_DMA)
<LI> stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterTransmitCplt)
<LI> stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterReceiveCplt)
<LI> stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Transmit_DMA)
<LI> stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_DMA)
</UL>
<P><STRONG><a name="[9f]"></a>I2C_DMAMasterTransmitCplt</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_DMAMasterTransmitCplt &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Transmit_DMA)
</UL>
<P><STRONG><a name="[9d]"></a>I2C_DMAError</STRONG> (Thumb, 484 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_DMAError &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Transmit_DMA)
<LI> stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_DMA)
</UL>
<P><STRONG><a name="[a5]"></a>I2C_Slave_ISR_DMA</STRONG> (Thumb, 778 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.I2C_Slave_ISR_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Slave_ISR_DMA &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32h7xx_hal_i2c.o(.text.I2C_Master_ISR_DMA)
<LI> stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterTransmitCplt)
<LI> stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterReceiveCplt)
</UL>
<P><STRONG><a name="[9c]"></a>I2C_DMAMasterReceiveCplt</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c.o(.text.I2C_DMAMasterReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_DMAMasterReceiveCplt &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_i2c.o(.text.HAL_I2C_Master_Seq_Receive_DMA)
</UL>
<P><STRONG><a name="[a7]"></a>I2C_DMAAbort</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(.text.I2C_DMAAbort))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_i2c.o(.text.I2C_ITError)
</UL>
<P><STRONG><a name="[1a2]"></a>LTDC_SetConfig</STRONG> (Thumb, 292 bytes, Stack size 20 bytes, stm32h7xx_hal_ltdc.o(.text.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[1ac]"></a>OSPI_ConfigCmd</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, stm32h7xx_hal_ospi.o(.text.OSPI_ConfigCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSPI_ConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>

<P><STRONG><a name="[1bf]"></a>SPI_CloseTransfer</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.SPI_CloseTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[a0]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SPI_DMAAbortOnError &rArr; HAL_SPI_ErrorCallback &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(.text.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[a2]"></a>UART_DMAError</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAError &rArr; HAL_UART_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
<LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[a3]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; com_uart_tx_cplt &rArr; com_check_task &rArr; __kfifo_get_try
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[a4]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[ab]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; com_uart_rx_pack_cplt &rArr; com_queue_put_rx &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[ac]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; com_uart_rx_pack_cplt &rArr; com_queue_put_rx &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[a1]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[28e]"></a>prvUnlockQueue</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[282]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[27e]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[c7]"></a>prvIdleTask</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[286]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[c9]"></a>prvTimerTask</STRONG> (Thumb, 714 bytes, Stack size 40 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[288]"></a>prvSampleTimeNow</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[b7]"></a>prvTaskExitError</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[2ba]"></a>vPortEnableVFP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2bb]"></a>prvPortStartFirstTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2a0]"></a>shellWritePrompt</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, shell.o(.text.shellWritePrompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shellWritePrompt
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellEnter
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInsertByte
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellInit
</UL>

<P><STRONG><a name="[2ab]"></a>shellShowVar</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, shell.o(.text.shellShowVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shellShowVar
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSetVarValue
</UL>

<P><STRONG><a name="[2aa]"></a>shellWriteReturnValue</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, shell.o(.text.shellWriteReturnValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shellWriteReturnValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellRunCommand
</UL>

<P><STRONG><a name="[29e]"></a>shellHistory</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, shell.o(.text.shellHistory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shellHistory
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellDown
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellUp
</UL>

<P><STRONG><a name="[2a8]"></a>shellWriteCommandHelp</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, shell.o(.text.shellWriteCommandHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = shellWriteCommandHelp &rArr; shellSeekCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellSeekCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellHelp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shellTab
</UL>

<P><STRONG><a name="[260]"></a>get_fmt_enabled</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, elog.o(.text.get_fmt_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = get_fmt_enabled &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
</UL>

<P><STRONG><a name="[27b]"></a>page256_or_1_byte_write</STRONG> (Thumb, 728 bytes, Stack size 64 bytes, sfud.o(.text.page256_or_1_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = page256_or_1_byte_write &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>

<P><STRONG><a name="[ba]"></a>spi_write_read</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, sfud_port.o(.text.spi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = spi_write_read &rArr; sfud_log_debug &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_rx_get
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_start_rx
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_spi_tx
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[be]"></a>spi_write_read_qspi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfud_port.o(.text.spi_write_read_qspi))
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[bf]"></a>qspi_read</STRONG> (Thumb, 220 bytes, Stack size 112 bytes, sfud_port.o(.text.qspi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = qspi_read &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_output
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_log_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfud_port.o(.text.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[23e]"></a>check_and_update_part_cache</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, fal_partition.o(.text.check_and_update_part_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = check_and_update_part_cache &rArr; fal_flash_device_find &rArr; elog_raw_output &rArr; elog_port_output &rArr; com_uart_tx &rArr; com_queue_put &rArr; puts &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[e1]"></a>init_spiflash</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fal_flash_sfud_port.o(.text.init_spiflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_spiflash
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data.spi_flash0)
</UL>
<P><STRONG><a name="[e2]"></a>read_spiflash</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fal_flash_sfud_port.o(.text.read_spiflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = read_spiflash &rArr; sfud_read &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data.spi_flash0)
</UL>
<P><STRONG><a name="[e3]"></a>write_spiflash</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, fal_flash_sfud_port.o(.text.write_spiflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = write_spiflash &rArr; sfud_write &rArr; page256_or_1_byte_write &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data.spi_flash0)
</UL>
<P><STRONG><a name="[e4]"></a>erase_spiflash</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, fal_flash_sfud_port.o(.text.erase_spiflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = erase_spiflash &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; sfud_log_info &rArr; elog_output &rArr;  elog_output (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elog_raw_output
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data.spi_flash0)
</UL>
<P><STRONG><a name="[96]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>_local_sscanf</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[14f]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[159]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
